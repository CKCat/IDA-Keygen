/*
* IDA Pro reverse-engineered license data and rsa const header
* 
* RnD, 2021
*/

#ifdef _MSC_VER
#pragma once
#endif

#ifndef _IDA_LICENSE_HPP_
#define _IDA_LICENSE_HPP_

#include <cstdint>
#include <string>
#include <cassert>

#ifndef MD5_SIZE
#define MD5_SIZE				16
#endif

#define IDA_LIC_USERNAME_SIZE	64
#define IDA_RSA_BLOCK_SIZE		128

namespace ida
{
	// https://www.hex-rays.com/licenses/
	enum ELicense
	{
		ELicense_Fixed = 0,
		ELicense_Named = 1,
		ELicense_Computer = 2,
		ELicense_Floating = 3,
	};

	typedef uint8_t id_t[6];
	typedef uint8_t md5_t[MD5_SIZE];
	typedef uint8_t signature_t[IDA_RSA_BLOCK_SIZE];

	#pragma pack(push, 1)
	typedef struct license_t {
		uint8_t zero;
		int16_t keyNumber; // -1 or random
		uint16_t keyVer;
		uint16_t typeLic; // ELicense
		uint16_t userNumber; // 1 - 65535
		int32_t reserved0; // -1
		int32_t reserved1; // -1
		uint32_t started; // UNIX TIME
		uint32_t expires; // UNIX TIME (0)
		uint32_t expSupp; // UNIX TIME
		id_t licenseId;
		char username[IDA_LIC_USERNAME_SIZE];
		uint8_t reserved2[5];
		uint32_t versionFlag;
		uint8_t reserved3[4];
		md5_t md5;
		// uint8_t pad[32]; // 0x0
	} license_t;
	#pragma pack(pop)

	// reverse-engineered modulus
	const uint8_t ida_rsa_mod[] = {
		0xED, 0xFD, 0x42, 0x5C, 0xF9, 0x78, 0x54, 0x6E, 0x89, 0x11, 0x22, 0x58, 0x84, 0x43, 0x6C, 0x57,
		0x14, 0x05, 0x25, 0x65, 0x0B, 0xCF, 0x6E, 0xBF, 0xE8, 0x0E, 0xDB, 0xC5, 0xFB, 0x1D, 0xE6, 0x8F,
		0x4C, 0x66, 0xC2, 0x9C, 0xB2, 0x2E, 0xB6, 0x68, 0x78, 0x8A, 0xFC, 0xB0, 0xAB, 0xBB, 0x71, 0x80,
		0x44, 0x58, 0x4B, 0x81, 0x0F, 0x89, 0x70, 0xCD, 0xDF, 0x22, 0x73, 0x85, 0xF7, 0x5D, 0x5D, 0xDD,
		0xD9, 0x1D, 0x4F, 0x18, 0x93, 0x7A, 0x08, 0xAA, 0x83, 0xB2, 0x8C, 0x49, 0xD1, 0x2D, 0xC9, 0x2E,
		0x75, 0x05, 0xBB, 0x38, 0x80, 0x9E, 0x91, 0xBD, 0x0F, 0xBD, 0x2F, 0x2E, 0x6A, 0xB1, 0xD2, 0xE3,
		0x3C, 0x0C, 0x55, 0xD5, 0xBD, 0xDD, 0x47, 0x8E, 0xE8, 0xBF, 0x84, 0x5F, 0xCE, 0xF3, 0xC8, 0x2B,
		0x9D, 0x29, 0x29, 0xEC, 0xB7, 0x1F, 0x4D, 0x1B, 0x3D, 0xB9, 0x6E, 0x3A, 0x8E, 0x7A, 0xAF, 0x93
	};

	const uint8_t ida_rsa_pub = 0x13;

	bool decrypt_signature(const signature_t& sign, license_t& license,
		const uint8_t* customModulus = nullptr);
}

#endif